import telebot
from telebot import types
import logging
import matplotlib.pyplot as plt
from config.config import API_TOKEN, ADMIN_IDS, CHANNEL_USERNAME
from keyboard.keyboard import create_main_menu, create_calculator_menu, create_admin_panel_menu, create_exit_to_admin_button, create_my_calculations_menu, set_rate_menu_markup
from database.database import create_db, save_user_history, get_user_history, save_yuan_rate_graph
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ConversationHandler
from telegram.ext.filters import Command, Text
from functools import partial
import requests
from PIL import Image, ImageDraw, ImageFont
from datetime import datetime
from io import BytesIO
import os
import time
import sqlite3

bot = telebot.TeleBot(API_TOKEN)

# –ù–∞—Å—Ç—Ä–æ–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—É—Ä—Å–∞ –¥–æ–ª–ª–∞—Ä–∞ –∏ —é–∞–Ω—è
usd_rate = 1.0  # –ö—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞ (—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º)
cny_rate = 12.0  # –ö—É—Ä—Å —é–∞–Ω—è (—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º)

user_data = {}
user_history = {}
orders_data = {}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
create_db()

def is_subscribed(user_id):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –∫–∞–Ω–∞–ª–µ
        member = bot.get_chat_member(CHANNEL_USERNAME, user_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∫–∞–Ω–∞–ª–µ
        if member.status in ['member', 'administrator', 'creator']:
            return True
        else:
            return False
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è {user_id}: {e}")
        return False

@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –∫–∞–Ω–∞–ª
    if not is_subscribed(user_id):  # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –≤–∞—à–∞ –ª–æ–≥–∏–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
        markup = types.InlineKeyboardMarkup()
        subscribe_button = types.InlineKeyboardButton(text="‚úÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=f"t.me/{CHANNEL_USERNAME}")
        check_subscription_button = types.InlineKeyboardButton(text="üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription")
        markup.add(subscribe_button, check_subscription_button)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏, —Ç–µ–∫—Å—Ç –∏ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
        with open('Images/subscribe.jpg', 'rb') as photo:  # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
            bot.send_photo(
                message.chat.id, 
                photo, 
                caption="–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª.",
                reply_markup=markup  # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏
            )
        return

    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞.")
    
    # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é, —Ç–µ–∫—Å—Ç –∏ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
    with open('Images/mm3.jpg', 'rb') as photo:  # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        bot.send_photo(
            message.chat.id, 
            photo, 
            caption="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π.",
            reply_markup=create_main_menu(user_id)  # –ü–µ—Ä–µ–¥–∞–µ–º user_id –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        )

# –õ–æ–≥–∏–∫–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
@bot.callback_query_handler(func=lambda call: call.data == "shipping_cost")
def start_shipping_calculation(call):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞ –ø–µ—Ä–µ–¥ –≤–≤–æ–¥–æ–º –¥–∞–Ω–Ω—ã—Ö"""
    user_id = call.from_user.id
    user_data[user_id] = {}  # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
    bot.delete_message(call.message.chat.id, call.message.message_id)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É "search_ship" –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞
    with open('Images/search_ship.jpg', 'rb') as photo:
        sent_message = bot.send_photo(call.message.chat.id, photo, caption="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞:")

    user_data[user_id]['last_bot_message_id'] = sent_message.message_id
    bot.register_next_step_handler(call.message, process_calc_name)


def process_calc_name(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–∞—Å—á–µ—Ç–∞"""
    user_id = message.from_user.id

    # –£–¥–∞–ª—è–µ–º –ø—Ä–æ—à–ª—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    delete_previous_messages(message.chat.id, user_id, message.message_id)

    user_data[user_id]['calc_name'] = message.text  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª–∏–Ω—ã —Ç–æ–≤–∞—Ä–∞
    with open('Images/search_ship.jpg', 'rb') as photo:
        sent_message = bot.send_photo(message.chat.id, photo, caption="–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏–Ω—É —Ç–æ–≤–∞—Ä–∞ –≤ —Å–º:")

    user_data[user_id]['last_bot_message_id'] = sent_message.message_id
    bot.register_next_step_handler(message, process_length)

def process_length(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ –¥–ª–∏–Ω—ã —Ç–æ–≤–∞—Ä–∞"""
    user_id = message.from_user.id
    try:
        user_data[user_id]['length'] = float(message.text)

        delete_previous_messages(message.chat.id, user_id, message.message_id)

        with open('Images/search_ship.jpg', 'rb') as photo:
            sent_message = bot.send_photo(message.chat.id, photo, caption="–í–≤–µ–¥–∏—Ç–µ —à–∏—Ä–∏–Ω—É —Ç–æ–≤–∞—Ä–∞ –≤ —Å–º:")

        user_data[user_id]['last_bot_message_id'] = sent_message.message_id
        bot.register_next_step_handler(message, process_width)

    except ValueError:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")


def process_width(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ —à–∏—Ä–∏–Ω—ã —Ç–æ–≤–∞—Ä–∞"""
    user_id = message.from_user.id
    try:
        user_data[user_id]['width'] = float(message.text)

        delete_previous_messages(message.chat.id, user_id, message.message_id)

        with open('Images/search_ship.jpg', 'rb') as photo:
            sent_message = bot.send_photo(message.chat.id, photo, caption="–í–≤–µ–¥–∏—Ç–µ –≤—ã—Å–æ—Ç—É —Ç–æ–≤–∞—Ä–∞ –≤ —Å–º:")

        user_data[user_id]['last_bot_message_id'] = sent_message.message_id
        bot.register_next_step_handler(message, process_height)

    except ValueError:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")


def process_height(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ –≤—ã—Å–æ—Ç—ã —Ç–æ–≤–∞—Ä–∞"""
    user_id = message.from_user.id
    try:
        user_data[user_id]['height'] = float(message.text)

        delete_previous_messages(message.chat.id, user_id, message.message_id)

        with open('Images/search_ship.jpg', 'rb') as photo:
            sent_message = bot.send_photo(message.chat.id, photo, caption="–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å —Ç–æ–≤–∞—Ä–∞ –≤ –∫–≥:")

        user_data[user_id]['last_bot_message_id'] = sent_message.message_id
        bot.register_next_step_handler(message, process_weight)

    except ValueError:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")


def process_weight(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ –≤–µ—Å–∞ —Ç–æ–≤–∞—Ä–∞ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ"""
    user_id = message.from_user.id
    try:
        user_data[user_id]['weight'] = float(message.text)

        delete_previous_messages(message.chat.id, user_id, message.message_id)

        confirm_shipping_data(message)

    except ValueError:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")


def confirm_shipping_data(message):
    """–í—ã–≤–æ–¥–∏–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    user_id = message.from_user.id
    data = user_data[user_id]

    response = (
        f"*–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞:* {data['calc_name']}\n\n"
        f"üìè –î–ª–∏–Ω–∞: {data['length']} —Å–º\n"
        f"üìê –®–∏—Ä–∏–Ω–∞: {data['width']} —Å–º\n"
        f"üì¶ –í—ã—Å–æ—Ç–∞: {data['height']} —Å–º\n"
        f"‚öñÔ∏è –í–µ—Å: {data['weight']} –∫–≥\n\n"
        f"–ù–∞–∂–º–∏—Ç–µ ‚úÖ *–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å* –∏–ª–∏ ‚ùå *–ò–∑–º–µ–Ω–∏—Ç—å*."
    )

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_shipping_calc"))
    markup.add(types.InlineKeyboardButton("‚ùå –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="shipping_cost"))

    sent_message = bot.send_message(message.chat.id, response, parse_mode='Markdown', reply_markup=markup)
    user_data[user_id]['last_bot_message_id'] = sent_message.message_id


@bot.callback_query_handler(func=lambda call: call.data == "confirm_shipping_calc")
def calculate_shipping(call):
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏"""
    user_id = call.from_user.id
    data = user_data[user_id]

    volume_weight = (data['length'] * data['width'] * data['height']) / 5000  
    normal_weight = data['weight']
    final_weight = max(volume_weight, normal_weight)

    cost_in_usd = final_weight * 9  
    cost_in_rub = cost_in_usd * usd_rate  
    cost_in_cny = cost_in_rub / cny_rate  

    response = (
        f"üì¶ *–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞:* {data['calc_name']}\n\n"
        f"üìè –î–ª–∏–Ω–∞: {data['length']} —Å–º\n"
        f"üìê –®–∏—Ä–∏–Ω–∞: {data['width']} —Å–º\n"
        f"üì¶ –í—ã—Å–æ—Ç–∞: {data['height']} —Å–º\n"
        f"‚öñÔ∏è –†–µ–∞–ª—å–Ω—ã–π –≤–µ—Å: {normal_weight:.2f} –∫–≥\n"
        f"‚öñÔ∏è –û–±—ä–µ–º–Ω—ã–π –≤–µ—Å: {volume_weight:.2f} –∫–≥\n"
        f"üîπ *–ò—Ç–æ–≥–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç–Ω—ã–π –≤–µ—Å:* {final_weight:.2f} –∫–≥\n\n"
        f"üí≤ –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏: {cost_in_usd:.2f} $\n"
        f"üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å –≤ —Ä—É–±–ª—è—Ö: {cost_in_rub:.2f} ‚ÇΩ\n"
        f"üí¥ –°—Ç–æ–∏–º–æ—Å—Ç—å –≤ —é–∞–Ω—è—Ö: {cost_in_cny:.2f} ¬•"
    )

    time.sleep(5)
    delete_previous_messages(call.message.chat.id, user_id, call.message.message_id)

    with open('Images/search_ship.jpg', 'rb') as photo:
        bot.send_photo(call.message.chat.id, photo, caption=response, reply_markup=create_exit_button())

    # **–°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å—á–µ—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö**
    save_calculation_to_db(user_id, data['calc_name'], "shipping_cost", response)


def save_calculation_to_db(user_id, calc_name, calc_type, result):
    """–§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞—Å—á–µ—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    print(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î: {user_id}, {calc_name}, {calc_type}, {result}")
#

###

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "üí∞ –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏"
@bot.callback_query_handler(func=lambda call: call.data == "product_cost")
def start_product_calculation(call):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞ –ø–µ—Ä–µ–¥ –≤–≤–æ–¥–æ–º –¥–∞–Ω–Ω—ã—Ö"""
    user_id = call.from_user.id
    user_data[user_id] = {}  # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
    bot.delete_message(call.message.chat.id, call.message.message_id)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É "search_order.jpg" –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞
    with open('Images/search_order.jpg', 'rb') as photo:
        sent_message = bot.send_photo(call.message.chat.id, photo, caption="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞:")

    user_data[user_id]['last_bot_message_id'] = sent_message.message_id
    bot.register_next_step_handler(call.message, process_calculation_name)


def process_calculation_name(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–∞—Å—á–µ—Ç–∞"""
    user_id = message.from_user.id

    # –£–¥–∞–ª—è–µ–º –ø—Ä–æ—à–ª—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    delete_previous_messages(message.chat.id, user_id, message.message_id)

    user_data[user_id]['calc_name'] = message.text.strip()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ

    if not user_data[user_id]['calc_name']:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.")
        return

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ –≤ —é–∞–Ω—è—Ö
    with open('Images/search_order.jpg', 'rb') as photo:
        sent_message = bot.send_photo(message.chat.id, photo, caption="–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ –≤ —é–∞–Ω—è—Ö:")

    user_data[user_id]['last_bot_message_id'] = sent_message.message_id
    bot.register_next_step_handler(message, process_price_in_cny)


def delete_previous_messages(chat_id, user_id, user_message_id):
    """–£–¥–∞–ª—è–µ—Ç –¥–≤–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏—è (–±–æ—Ç–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)"""
    try:
        if 'last_bot_message_id' in user_data[user_id]:
            bot.delete_message(chat_id, user_data[user_id]['last_bot_message_id'])  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
        bot.delete_message(chat_id, user_message_id)  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")


def process_price_in_cny(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–∞ –≤ —é–∞–Ω—è—Ö"""
    user_id = message.from_user.id
    try:
        user_data[user_id]['price_in_cny'] = float(message.text)

        delete_previous_messages(message.chat.id, user_id, message.message_id)
        confirm_product_cost_data(message)

    except ValueError:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")


def confirm_product_cost_data(message):
    """–í—ã–≤–æ–¥–∏–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ —Ä–∞—Å—á–µ—Ç–æ–º"""
    user_id = message.from_user.id
    data = user_data[user_id]

    response = (
        f"*–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞:* {data['calc_name']}\n\n"
        f"üí∞ *–°—Ç–æ–∏–º–æ—Å—Ç—å –≤ —é–∞–Ω—è—Ö:* {data['price_in_cny']} —é–∞–Ω–µ–π\n"
        f"–ù–∞–∂–º–∏—Ç–µ ‚úÖ *–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å* –∏–ª–∏ ‚ùå *–ò–∑–º–µ–Ω–∏—Ç—å*."
    )

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_product_cost_calc"))
    markup.add(types.InlineKeyboardButton("‚ùå –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="product_cost"))

    sent_message = bot.send_message(message.chat.id, response, parse_mode='Markdown', reply_markup=markup)
    user_data[user_id]['last_bot_message_id'] = sent_message.message_id


@bot.callback_query_handler(func=lambda call: call.data == "confirm_product_cost_calc")
def calculate_product_cost(call):
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ —Å —É—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–∏"""
    user_id = call.from_user.id
    data = user_data[user_id]

    price_in_cny = data['price_in_cny']

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –∫–æ–º–∏—Å—Å–∏–∏
    if price_in_cny <= 300:
        commission_percent = 15
    elif price_in_cny <= 500:
        commission_percent = 10
    else:
        commission_percent = 5

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–º–∏—Å—Å–∏—é
    commission_in_cny = price_in_cny * (commission_percent / 100)
    commission_in_rub = commission_in_cny * cny_rate

    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å
    price_in_rub = price_in_cny * cny_rate
    final_cost = price_in_rub + commission_in_rub

    response = (
        f"üì¶ *–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞:* {data['calc_name']}\n\n"
        f"üí∞ *–°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ –≤ —é–∞–Ω—è—Ö:* {price_in_cny} —é–∞–Ω–µ–π\n"
        f"üíµ *–°—Ç–æ–∏–º–æ—Å—Ç—å –≤ —Ä—É–±–ª—è—Ö (–ø–æ –∫—É—Ä—Å—É {cny_rate}):* {price_in_rub:.2f} ‚ÇΩ\n"
        f"üìä *–ö–æ–º–∏—Å—Å–∏—è ({commission_percent}%):* {commission_in_rub:.2f} ‚ÇΩ\n"
        f"üí≤ *–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:* {final_cost:.2f} ‚ÇΩ"
    )

    time.sleep(5)
    delete_previous_messages(call.message.chat.id, user_id, call.message.message_id)

    with open('Images/search_order.jpg', 'rb') as photo:
        bot.send_photo(call.message.chat.id, photo, caption=response, reply_markup=create_exit_button())

    # **–°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å—á–µ—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö**
    save_calculation_to_db(user_id, data['calc_name'], "product_cost", response)


def save_calculation_to_db(user_id, calc_name, calc_type, result):
    """–§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞—Å—á–µ—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    
    # –í—Ä–µ–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞—Å—á–µ—Ç–∞
    timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    with sqlite3.connect('database/bot_data.db') as conn:
        cursor = conn.cursor()
        cursor.execute('''INSERT INTO calculations (user_id, calc_name, calc_type, result, timestamp)
                          VALUES (?, ?, ?, ?, ?)''', 
                          (user_id, calc_name, calc_type, result, timestamp))
        conn.commit()
    
    # –í—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    print(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î: {user_id}, {calc_name}, {calc_type}, {result}")

    

###

@bot.callback_query_handler(func=lambda call: call.data == "my_calculations")
def my_calculations(call):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É "archive.jpg" –ø–µ—Ä–µ–¥ –º–µ–Ω—é
    with open('Images/archive.jpg', 'rb') as photo:  # –ü—É—Ç—å –∫ –∫–∞—Ä—Ç–∏–Ω–∫–µ
        # –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ç–æ–≤–æ–µ –º–µ–Ω—é –∏–∑ keyboard.py
        markup = create_my_calculations_menu()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –º–µ–Ω—é
        bot.send_photo(call.message.chat.id, photo, caption="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤–∞—à–∏—Ö —Ä–∞—Å—á–µ—Ç–æ–≤:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "my_product_costs")
def show_product_costs(call):
    user_history = get_user_history(call.from_user.id)

    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ä–∞—Å—á–µ—Ç—ã –¥–ª—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–∞
    product_costs = [record for record in user_history if record[0] == "–°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞"]

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    markup = types.InlineKeyboardMarkup()

    if not product_costs:
        bot.send_message(call.message.chat.id, "–ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—á–µ—Ç–æ–≤ –ø—É—Å—Ç–∞.", reply_markup=create_calculator_menu())
    else:
        response = "üìä –ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—á–µ—Ç–æ–≤ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–∞:\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 5 —Ä–∞—Å—á–µ—Ç–æ–≤
        for i, record in enumerate(product_costs[:5]):
            markup.add(types.InlineKeyboardButton(text=f"–†–∞—Å—á–µ—Ç {i+1}", callback_data=f"view_product_cost_{i}"))

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        bot.send_message(call.message.chat.id, response, reply_markup=markup)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
    markup.add(types.InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))
    bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Ä–∞—Å—á–µ—Ç –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("view_product_cost_"))
def view_product_cost(call):
    calc_index = int(call.data.split("_")[-1])

    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ä–∞—Å—á–µ—Ç–æ–≤
    user_history = get_user_history(call.from_user.id)
    product_costs = [record for record in user_history if record[0] == "–°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞"]

    if calc_index < len(product_costs):
        response = f"üìä –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ —Ä–∞—Å—á–µ—Ç–∞:\n{product_costs[calc_index][1]}"
        bot.send_message(call.message.chat.id, response, reply_markup=create_calculator_menu())
    else:
        bot.answer_callback_query(call.id, "–†–∞—Å—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))
    bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Ä–∞—Å—á–µ—Ç –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "my_shipping_costs")
def show_shipping_costs(call):
    user_history = get_user_history(call.from_user.id)

    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ä–∞—Å—á–µ—Ç—ã –¥–ª—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
    shipping_costs = [record for record in user_history if record[0] == "–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏"]

    markup = types.InlineKeyboardMarkup()

    if not shipping_costs:
        bot.send_message(call.message.chat.id, "–ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—á–µ—Ç–æ–≤ –ø—É—Å—Ç–∞.", reply_markup=create_calculator_menu())
    else:
        response = "üì¶ –ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—á–µ—Ç–æ–≤ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏:\n"
        for i, record in enumerate(shipping_costs[:5]):
            markup.add(types.InlineKeyboardButton(text=f"–î–æ—Å—Ç–∞–≤–∫–∞ {i+1}", callback_data=f"view_shipping_cost_{i}"))

        bot.send_message(call.message.chat.id, response, reply_markup=markup)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    markup.add(types.InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))
    bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Ä–∞—Å—á–µ—Ç –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("view_shipping_cost_"))
def view_shipping_cost(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏"""
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω–¥–µ–∫—Å —Ä–∞—Å—á–µ—Ç–∞
        calc_index = int(call.data.split("_")[-1])

        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ä–∞—Å—á–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_history = get_user_history(call.from_user.id)
        shipping_costs = [record for record in user_history if record[0] == "–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏"]

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∏–Ω–¥–µ–∫—Å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Å–ø–∏—Å–∫–µ
        if calc_index < len(shipping_costs):
            response = f"üì¶ –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ —Ä–∞—Å—á–µ—Ç–∞:\n{shipping_costs[calc_index][1]}"

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç—è–º–∏
            bot.send_message(call.message.chat.id, response, reply_markup=create_calculator_menu())
        else:
            bot.answer_callback_query(call.id, "–†–∞—Å—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    except Exception as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª—é–±—ã—Ö –æ—à–∏–±–æ–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –∏–Ω–¥–µ–∫—Å—ã –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç)
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å—á–µ—Ç–∞.")
        print(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ: {e}")

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∞
def is_admin(user_id):
    return user_id in ADMIN_IDS

@bot.callback_query_handler(func=lambda call: call.data == "admin_panel")
def admin_panel(call):
    """–£–¥–∞–ª—è–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º"""
    bot.delete_message(call.message.chat.id, call.message.message_id)

    if is_admin(call.from_user.id):  # –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        with open('Images/admin.jpg', 'rb') as photo:
            markup = create_admin_panel_menu()  # –°–æ–∑–¥–∞–µ–º –º–µ–Ω—é –∞–¥–º–∏–Ω–∞
            bot.send_photo(call.message.chat.id, photo, caption="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=markup)
    else:
        bot.send_message(call.message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω—Å–∫–æ–º—É —Ä–∞–∑–¥–µ–ª—É.")

@bot.callback_query_handler(func=lambda call: call.data == "set_rate_menu")
def set_rate_menu(call):
    """–£–¥–∞–ª—è–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–Ω—é —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫—É—Ä—Å–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º"""
    try:
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        bot.delete_message(call.message.chat.id, call.message.message_id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        if is_admin(call.from_user.id):
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
            with open('Images/new_course.jpg', 'rb') as photo:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –º–µ–Ω—é
                bot.send_photo(call.message.chat.id, photo, caption="–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏:", reply_markup=set_rate_menu_markup())
        else:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
            bot.send_message(call.message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
    except FileNotFoundError:
        # –û—à–∏–±–∫–∞, –µ—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
        bot.send_message(call.message.chat.id, "–û—à–∏–±–∫–∞: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –º–µ–Ω—é –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    except Exception as e:
        # –û–±—â–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        bot.send_message(call.message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ set_rate_menu: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "üíµ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞"

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "üíµ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞"

@bot.callback_query_handler(func=lambda call: call.data == "set_usd_rate")
def set_usd_rate(call):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –∫—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞"""
    user_id = call.from_user.id
    user_data[user_id] = {}  # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫—É—Ä—Å–∞
    bot.delete_message(call.message.chat.id, call.message.message_id)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –∫—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞
    with open('Images/new_course_usd.jpg', 'rb') as photo:
        sent_message = bot.send_photo(call.message.chat.id, photo, caption="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞:")

    user_data[user_id]['last_bot_message_id'] = sent_message.message_id
    bot.register_next_step_handler(call.message, process_rate)


def process_rate(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ –Ω–æ–≤–æ–≥–æ –∫—É—Ä—Å–∞ –¥–æ–ª–ª–∞—Ä–∞"""
    user_id = message.from_user.id

    # –£–¥–∞–ª—è–µ–º –ø—Ä–æ—à–ª—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    delete_previous_messages(message.chat.id, user_id, message.message_id)

    try:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π –∫—É—Ä—Å
        rate = float(message.text)

        # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é usd_rate
        global usd_rate
        usd_rate = rate  # –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π usd_rate

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –∫—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        save_valute_rate("USD", rate, "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –Ω–∞ {}".format(datetime.today().strftime('%Y-%m-%d')))

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –∏ –∫–∞—Ä—Ç–∏–Ω–∫–æ–π
        with open('Images/new_course_successfully.jpg', 'rb') as success_photo:
            sent_message = bot.send_photo(message.chat.id, success_photo, 
                                          caption=f"–ö—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {rate} —Ä—É–±.\n–î–ª—è –≤—ã—Ö–æ–¥–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
                                          reply_markup=create_exit_to_admin_button())

        user_data[user_id]['last_bot_message_id'] = sent_message.message_id

    except ValueError:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")

    bot.register_next_step_handler(message, process_rate)


def save_valute_rate(currency_code, rate, changes):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫—É—Ä—Å –≤–∞–ª—é—Ç—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
    """
    date = datetime.today().strftime('%Y-%m-%d')

    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        with sqlite3.connect('database/bot_data.db') as conn:
            cursor = conn.cursor()

            # –í—ã–ø–æ–ª–Ω—è–µ–º SQL-–∑–∞–ø—Ä–æ—Å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
            cursor.execute('''INSERT INTO valute (currency_code, rate, date, changes) 
                              VALUES (?, ?, ?, ?)''', 
                              (currency_code, rate, date, changes))

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            conn.commit()

        # –í—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        print(f"–ö—É—Ä—Å {currency_code} —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {rate} –Ω–∞ {date} —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏: {changes}")
    
    except sqlite3.Error as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ SQLite
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫—É—Ä—Å–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {e}")

    except Exception as e:
        # –û–±—â–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")


def delete_previous_messages(chat_id, user_id, user_message_id):
    """–£–¥–∞–ª—è–µ—Ç –¥–≤–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏—è (–±–æ—Ç–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)"""
    try:
        if 'last_bot_message_id' in user_data[user_id]:
            bot.delete_message(chat_id, user_data[user_id]['last_bot_message_id'])  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
        bot.delete_message(chat_id, user_message_id)  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")



@bot.callback_query_handler(func=lambda call: call.data == "set_cny_rate")
def set_cny_rate(call):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–π –∫—É—Ä—Å —é–∞–Ω—è"""
    user_id = call.from_user.id
    user_data[user_id] = {}  # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫—É—Ä—Å–∞
    bot.delete_message(call.message.chat.id, call.message.message_id)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –∫—É—Ä—Å —é–∞–Ω—è
    with open('Images/new_course_usd.jpg', 'rb') as photo:
        sent_message = bot.send_photo(call.message.chat.id, photo, caption="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫—É—Ä—Å —é–∞–Ω—è:")

    user_data[user_id]['last_bot_message_id'] = sent_message.message_id
    bot.register_next_step_handler(call.message, process_cny_rate)


def process_cny_rate(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ –Ω–æ–≤–æ–≥–æ –∫—É—Ä—Å–∞ —é–∞–Ω—è"""
    user_id = message.from_user.id

    # –£–¥–∞–ª—è–µ–º –ø—Ä–æ—à–ª—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    delete_previous_messages(message.chat.id, user_id, message.message_id)

    try:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π –∫—É—Ä—Å
        rate = float(message.text)

        # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é cny_rate
        global cny_rate
        cny_rate = rate  # –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π cny_rate

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –∫—É—Ä—Å —é–∞–Ω—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        save_valute_rate("CNY", rate, "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –Ω–∞ {}".format(datetime.today().strftime('%Y-%m-%d')))

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –∏ –∫–∞—Ä—Ç–∏–Ω–∫–æ–π
        with open('Images/new_course_successfully.jpg', 'rb') as success_photo:
            sent_message = bot.send_photo(message.chat.id, success_photo, 
                                          caption=f"–ö—É—Ä—Å —é–∞–Ω—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {rate} —Ä—É–±.\n–î–ª—è –≤—ã—Ö–æ–¥–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
                                          reply_markup=create_exit_to_admin_button())

        user_data[user_id]['last_bot_message_id'] = sent_message.message_id

    except ValueError:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")

    bot.register_next_step_handler(message, process_cny_rate)

def generate_rate_image():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –∫—É—Ä—Å–∞–º–∏ –≤–∞–ª—é—Ç –∏ –ª–æ–≥–æ—Ç–∏–ø–æ–º"""
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    usd_rate = get_valute_rate("USD")  # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞
    cny_rate = get_valute_rate("CNY")  # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å —é–∞–Ω—è

    if usd_rate is None:
        usd_rate = 85.0  # –ï—Å–ª–∏ –∫—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å—Ç–∞–≤–∏–º –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    if cny_rate is None:
        cny_rate = 12.3  # –ï—Å–ª–∏ –∫—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å—Ç–∞–≤–∏–º –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ

    # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    img = Image.new('RGB', (400, 200), color=(206, 204, 205))
    d = ImageDraw.Draw(img)

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —à—Ä–∏—Ñ—Ç
    try:
        font = ImageFont.truetype("fonts/Typingrad.otf", 30)
    except IOError:
        font = ImageFont.load_default()

    today = datetime.today().strftime('%Y-%m-%d')

    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å –∫—É—Ä—Å–∞–º–∏
    d.text((10, 10), f"–ö—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞: {usd_rate} —Ä—É–±.", font=font, fill=(0, 0, 0))
    d.text((10, 60), f"–ö—É—Ä—Å —é–∞–Ω—è: {cny_rate} —Ä—É–±.", font=font, fill=(0, 0, 0))
    d.text((10, 110), f"–î–∞—Ç–∞: {today}", font=font, fill=(0, 0, 0))

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–æ–≥–æ
    logo_path = "Images/logo.png"
    if os.path.exists(logo_path):
        try:
            logo = Image.open(logo_path).convert("RGBA")
            logo_size = (80, 80)
            logo = logo.resize(logo_size, Image.LANCZOS)
            logo_x = img.width - logo_size[0] - 10
            logo_y = img.height - logo_size[1] - 10
            img.paste(logo, (logo_x, logo_y), mask=logo)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ª–æ–≥–æ—Ç–∏–ø–∞: {e}")
    else:
        print("–õ–æ–≥–æ—Ç–∏–ø –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É—é —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø–æ—Ç–æ–∫
    image_stream = BytesIO()
    img.save(image_stream, format='PNG')
    image_stream.seek(0)

    return image_stream

@bot.callback_query_handler(func=lambda call: call.data == "get_rate")
def send_rate_image(call):
    """–£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∑–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –∫—É—Ä—Å–∞–º–∏"""
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é
    bot.delete_message(call.message.chat.id, call.message.message_id)

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –∫—É—Ä—Å–∞–º–∏ –≤–∞–ª—é—Ç
    image_stream = generate_rate_image()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç –∏ —Ç–µ–∫—Å—Ç–æ–º –≤ caption
    sent_message = bot.send_photo(call.message.chat.id, image_stream, 
                                  caption="üìä –ö—É—Ä—Å –≤–∞–ª—é—Ç:\n–ó–¥–µ—Å—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–∞—à –∑–∞–ø—Ä–æ—Å –ø–æ –∫—É—Ä—Å—É –≤–∞–ª—é—Ç. üìä", 
                                  reply_markup=create_exit_button())

def get_valute_rate(currency_code):
    """–ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å –≤–∞–ª—é—Ç—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    with sqlite3.connect('database/bot_data.db') as conn:
        cursor = conn.cursor()
        cursor.execute('''SELECT rate FROM valute WHERE currency_code = ? ORDER BY date DESC LIMIT 1''', (currency_code,))
        result = cursor.fetchone()

    if result:
        return result[0]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—É—Ä—Å –≤–∞–ª—é—Ç—ã
    else:
        return None  # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None
##

@bot.callback_query_handler(func=lambda call: call.data == "calculator")
def show_calculator(call):
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π "üì¶ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä"
    bot.delete_message(call.message.chat.id, call.message.message_id)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É "calculator.jpg" –≤–º–µ—Å—Ç–µ —Å –º–µ–Ω—é –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
    with open('Images/calculator.jpg', 'rb') as photo:  # –ü—É—Ç—å –∫ –∫–∞—Ä—Ç–∏–Ω–∫–µ
        markup = create_calculator_menu()  # –ü–æ–ª—É—á–∞–µ–º –º–µ–Ω—é –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –º–µ–Ω—é –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
        bot.send_photo(call.message.chat.id, photo, caption="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å—á–µ—Ç–∞:", reply_markup=markup)

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É "üì¶ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä" –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é
    markup = create_main_menu(call.from_user.id)  # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
    bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "main_menu")
def return_to_main_menu(call):
    try:
        # –ü—Ä–æ–±—É–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ)
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,  # ID —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            text="üè† –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!",  # –ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç
            reply_markup=create_main_menu(call.from_user.id)  # –ù–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏
        )

        # –ü—Ä–æ–±—É–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É (–µ—Å–ª–∏ –æ–Ω–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è)
        with open('Images/main_menu_image.jpg', 'rb') as photo:  # –ü—É—Ç—å –∫ –∫–∞—Ä—Ç–∏–Ω–∫–µ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
            bot.edit_message_media(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                media=types.InputMediaPhoto(photo)  # –ù–æ–≤–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
            )

    except Exception as e:
        # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        try:
            bot.delete_message(call.message.chat.id, call.message.message_id)
        except Exception as delete_error:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {delete_error}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
        with open('Images/mm3.jpg', 'rb') as photo:  # –ü—É—Ç—å –∫ –∫–∞—Ä—Ç–∏–Ω–∫–µ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
            bot.send_photo(call.message.chat.id, photo, caption="üè† –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!", reply_markup=create_main_menu(call.from_user.id))

@bot.callback_query_handler(func=lambda call: call.data == "check_subscription")
def check_subscription(call):
    user_id = call.from_user.id
    
    if is_subscribed(user_id):
        bot.answer_callback_query(call.id, "–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª!")
        bot.send_message(call.message.chat.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.")
    else:
        bot.send_message(call.id, "–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª.")
        bot.send_message(call.message.chat.id, "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª.")
        
    # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –º–µ–Ω—é
    bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π:", reply_markup=create_main_menu(user_id))

def create_exit_button():
    """–°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É –¥–ª—è –≤—ã—Ö–æ–¥–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))
    return markup

if __name__ == '__main__':
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
bot.polling(none_stop=True, interval=0)
